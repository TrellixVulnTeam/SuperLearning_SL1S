if(!require(installr)) {}
install.packages("installr"): require(installr)
updateR()
exit
exit()
quit()
rep(ABC, 2)
ABC = c('A', 'B', 'C')
rep(ABC, 2)
ABC = c('A', 'B', 'C')
rep(ABC, 2)
rep(ABC, times=2)
rep(ABC, 2)
rep(ABC, times=2)
rep(ABC, times=c(4, 3, 2))
ABC = c('A', 'B', 'C')
rep(ABC, 2)
rep(ABC, times=2)
rep(ABC, times=c(4, 3, 2))
rep(ABC, each=2)
ABC = c('A', 'B', 'C')
rep(ABC, 2)
rep(ABC, times=2)
rep(ABC, times=c(4, 3, 2))
rep(ABC, each=2)
rep(ABC, each=2, length=10)
ABC = c('A', 'B', 'C')
rep(ABC, 2)
rep(ABC, times=2)
rep(ABC, times=c(4, 3, 2))
rep(ABC, each=2)
rep(ABC, each=2, length=10)
rep(ABC, each=2, times=3)
ABC = c('A', 'B', 'C')
rep(ABC, 2)
rep(ABC, times=2)
rep(ABC, times=c(4, 3, 2))
rep(ABC, each=2)
rep(ABC, each=2, length=10)
rep(ABC, each=2, times=3)
rep(ABC, each=2, times=c(1,2,3,1,2,3))
ABC = c('A', 'B', 'C')
rep(ABC, 2)
rep(ABC, times=2)
rep(ABC, times=c(4, 3, 2))
rep(ABC, each=2)
rep(ABC, each=2, length=10)
rep(ABC, each=2, times=3)
rep(ABC, each=2, times=c(1,2,3,1,2,3))
rep(rep(ABC, each=2), times=c(1,2,3,1,2,3))
x = c( 2.718, 3.14, 1.414, 30135)
x[c(2,4)]
x = c( 2.718, 3.14, 1.414, 30135)
x[c(2,4)]
x[c(-1, -3)]
x = c( 2.718, 3.14, 1.414, 30135)
x[c(2,4)]
x[c(-1, -3)]
x[c(FALSE, TRUE, FALSE, TRUE)]
x = c( 2.718, 3.14, 1.414, 30135)
x[c(2,4)]
x[c(-1, -3)]
x[c(FALSE, TRUE, FALSE, TRUE)]
names(x) = c('e', 'pi', 'sqrt2', 'zipcode')
x[c('pi', 'zipcode')]
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factgor(x)
xf
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factor(x)
xf
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factor(x)
xf
as.numeric(xf)
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factor(x)
xf
as.numeric(xf)
xfo = factor( x, levels = c('low', "medium", 'high'), ordered=TRUE )
xfo
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factor(x)
xf
as.numeric(xf)
xfo = factor( x, levels = c('low', "medium", 'high'), ordered=TRUE )
xfo
as.numeric(xfo)
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factor(x)
xf
as.numeric(xf)
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factor(x)
xf
as.numeric(xf)
xf = factor(xf, levels=c('low', 'medium', 'high'), ordered=TRUE)
xf
as.numeric(xf)
x = c('high', 'medium', 'low', 'high', 'medium')
x
xf = factor(x)
xf
as.numeric(xf)
xf = factor(xf, levels=c('low', 'medium', 'high'), ordered=TRUE)
xf
as.numeric(xf)
xfol = factor( x, levels=c('low', 'medium', 'high' ), ordered=TRUE ,
labels=c('Bottom SES', 'Middle SES', 'Top SES'))
xfol
matrix( 1:6, ncol=3)
matrix( 1:6, ncol=3)
matrix( 1:6, nrow=2)
matrix( 1:6, ncol=3)
matrix( 1:6, nrow=2)
matrix( 1:6, nrow=3)
matrix( 1:6, ncol=3)
matrix( 1:6, nrow=2)
matrix( 1:6, nrow=3)
matrix( 1:6, nrow=2, byrow=TRUE)
matrix( 1:6, nrow=2,
dimnames=list( TheRowDimName=c('Row1Name', 'Row2Name'),
TheColDimName=c('Col1Name', 'Col2Name', 'Col3Name')))
x = matrix( 1:6, nrow=2,
dimnames=list( TheRowDimName=c('Row1Name', 'Row2Name'),
TheColDimName=c('Col1Name', 'Col2Name', 'Col3Name')))
x[2,3]
x = matrix( 1:6, nrow=2,
dimnames=list( TheRowDimName=c('Row1Name', 'Row2Name'),
TheColDimName=c('Col1Name', 'Col2Name', 'Col3Name')))
x[2,3]
x['Row2Name', 'Col3Name']
x[2, 1:3]
x[2,]
x[,3]
x=5
if ( x <= 3 ) {
show('small')
} else { show('big')
}
for ( countDown in 10:1 ) {
show(countDown)
}
for ( countDown in 100:1 ) {
show(countDown)
}
for ( countDown in 1000:1 ) {
show(countDown)
}
for ( note in c('do', 're', 'mi', 'fa', 'so', 'la', 'mi', 'do')) {
show(note)
}
startTime = proc.time()
for ( countDown in 1000:1 ) {
show(countDown)
}
stopTime = proc.time()
elapsedTime = stopTime - startTime
show(elapsedTime)
startTime = proc.time()
for ( countDown in 1000000:1 ) {
show(countDown)
}
stopTime = proc.time()
elapsedTime = stopTime - startTime
show(elapsedTime)
startTime = proc.time()
for ( countDown in 100000:1 ) {
show(countDown)
}
stopTime = proc.time()
elapsedTime2 = stopTime - startTime
show(elapsedTime2)
show(elapsedTime - elapsedTime2)
startTime = proc.time()
for ( countDown in 10000:1 ) {
show(countDown)
}
stopTime = proc.time()
elapsedTime3 = stopTime - startTime
show(elapsedTime3)
show(elapsedTime - elapsedTime2)
show(elapsedTime - elapsedTime3)
show(elapsedTime2 - elapsedTime3)
startTime = proc.time()
for ( countDown in 10000:1 ) {
show(countDown)
}
stopTime = proc.time()
elapsedTime3 = stopTime - startTime
show(elapsedTime3)
show(elapsedTime2)
show(elapsedTime)
show(elapsedTime - elapsedTime2)
show(elapsedTime - elapsedTime3)
show(elapsedTime2 - elapsedTime3)
source('DBDA2E-utilities.R')
source('DBDA2Eprograms\DBDA2E-utilities.R')
source('DBDA2Eprograms/DBDA2E-utilities.R')
pwd
setwd("C:/Users/jenkij/Desktop/SuperLearning/DBDA")
source('DBDA2Eprograms/DBDA2E-utilities.R')
source('DBDA2Eprograms/DBDA2E-utilities.R')
openGraph( width=3, height=4 )
plot( x=1:4, y=c(1,3,2,4), type='o' )
saveGraph( file='temp', type='pdf' )
install.packages("rjags")
require(rjags)
require(rjags)
remove.packages('rstan')
remove.packages('rstan')
if ( file.exists((.RData)) file.remove('RData'))
remove.packages('rstan')
if ( file.exists(.RData)) file.remove('RData'))
remove.packages('rstan')
if ( file.exists(.RData)) {
file.remove('RData')
}
